datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Timer {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  timerSettings TimerSettings?
  timerInfo     TimerInfo?
}

model TimerSettings {
  id             Int     @id @unique @default(autoincrement())
  privateTimer   Boolean @default(false)
  focusTimeHours Int?
  focusTimeMins  Int?
  focusTimeSecs  Int?
  breakTimeHours Int?
  breakTimeMins  Int?
  breakTimeSecs  Int?
  timerId        Int     @unique
  timer          Timer   @relation(fields: [timerId], references: [id])
}

model TimerInfo {
  id          Int      @id @unique @default(autoincrement())
  title       String?
  description String?
  createdAt   DateTime @default(now())
  timerId     Int      @unique
  timer       Timer    @relation(fields: [timerId], references: [id])
}

model UserPassword {
  id             Int    @id @unique @default(autoincrement())
  hashedPassword String
}
